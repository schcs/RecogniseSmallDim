
// The function takes a matrix group, a vector space V and a list
// of elements in V.
// Returns the G-submodule generated by list

GSubmodule := function( G, V, list );
    
    W := GModule( G );
    U := sub< W | list >;
    return sub< V | [ V!W!x : x in Basis( U )]>;
end function;
    

// Takes a matrix group and a vector space V (usually GF( q )^dim).
// Returns  the minimal G-submodules as subspaces of V.

MinimalSubmodulesOfUnderlyingVectorSpace := function( G, V )
    
    W := GModule( G );
    mins := MinimalSubmodules( W );
    return [ sub< V | [ V!W!x : x in Basis( y )]> : y in mins ];
end function;

// U is a subspace of V=GF(q)^dim.
// Returns the maps between GL( V ) and GL( U )


Restrict2Subspace := function( V, U )

    bas := Basis( U );
    q := #CoefficientRing( V );
      
    func := function( g )  
      
        mat := [];
        for b in bas do
            mat := mat cat Coordinates( U, b^g );
        end for;
        
        return mat;
    end function;
        
    map := pmap< GL( Dimension( V ), q ) -> GL( Dimension( U ), q ) |
           g:->func( g )>;
    
    return map;
end function;
